// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OneDc.Infrastructure;

#nullable disable

namespace OneDc.Infrastructure.Migrations
{
    [DbContext(typeof(OneDcDbContext))]
    [Migration("20250912181414_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ts")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OneDc.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("last_name");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("pk_app_user");

                    b.ToTable("app_user", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_log_id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uuid")
                        .HasColumnName("actor_id");

                    b.Property<string>("AfterJson")
                        .HasColumnType("text")
                        .HasColumnName("after_json");

                    b.Property<DateTimeOffset>("At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("at");

                    b.Property<string>("BeforeJson")
                        .HasColumnType("text")
                        .HasColumnName("before_json");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.HasKey("AuditLogId")
                        .HasName("pk_audit_log");

                    b.HasIndex("Entity", "EntityId", "At")
                        .HasDatabaseName("ix_audit_log_entity_entity_id_at");

                    b.ToTable("audit_log", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("ClientId")
                        .HasName("pk_client");

                    b.ToTable("client", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.Holiday", b =>
                {
                    b.Property<DateOnly>("HolidayDate")
                        .HasColumnType("date")
                        .HasColumnName("holiday_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.HasKey("HolidayDate")
                        .HasName("pk_holiday");

                    b.ToTable("holiday", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<bool>("Billable")
                        .HasColumnType("boolean")
                        .HasColumnName("billable");

                    b.Property<decimal?>("BudgetCost")
                        .HasColumnType("numeric")
                        .HasColumnName("budget_cost");

                    b.Property<decimal?>("BudgetHours")
                        .HasColumnType("numeric")
                        .HasColumnName("budget_hours");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DefaultApprover")
                        .HasColumnType("uuid")
                        .HasColumnName("default_approver");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("ProjectId")
                        .HasName("pk_project");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_project_code");

                    b.HasIndex("ClientId", "Status")
                        .HasDatabaseName("ix_project_client_id_status");

                    b.ToTable("project", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.ProjectAllocation", b =>
                {
                    b.Property<Guid>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("allocation_id");

                    b.Property<decimal>("AllocationPct")
                        .HasColumnType("numeric")
                        .HasColumnName("allocation_pct");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("AllocationId")
                        .HasName("pk_project_allocation");

                    b.HasIndex("ProjectId", "UserId", "StartDate")
                        .IsUnique()
                        .HasDatabaseName("ix_project_allocation_project_id_user_id_start_date");

                    b.ToTable("project_allocation", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.TimesheetEntry", b =>
                {
                    b.Property<Guid>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entry_id");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by");

                    b.Property<string>("ApproverComment")
                        .HasColumnType("text")
                        .HasColumnName("approver_comment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Hours")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("hours");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<string>("TicketRef")
                        .HasColumnType("text")
                        .HasColumnName("ticket_ref");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date")
                        .HasColumnName("work_date");

                    b.HasKey("EntryId")
                        .HasName("pk_timesheet_entry");

                    b.HasIndex("ProjectId", "WorkDate")
                        .HasDatabaseName("ix_timesheet_entry_project_id_work_date");

                    b.HasIndex("UserId", "WorkDate")
                        .HasDatabaseName("ix_timesheet_entry_user_id_work_date");

                    b.ToTable("timesheet_entry", "ts");
                });
#pragma warning restore 612, 618
        }
    }
}
