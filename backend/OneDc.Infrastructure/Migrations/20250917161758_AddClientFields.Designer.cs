// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OneDc.Infrastructure;

#nullable disable

namespace OneDc.Infrastructure.Migrations
{
    [DbContext(typeof(OneDcDbContext))]
    [Migration("20250917161758_AddClientFields")]
    partial class AddClientFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ts")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OneDc.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("pk_app_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_app_user_email");

                    b.ToTable("app_user", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_log_id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uuid")
                        .HasColumnName("actor_id");

                    b.Property<string>("AfterJson")
                        .HasColumnType("text")
                        .HasColumnName("after_json");

                    b.Property<DateTimeOffset>("At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("at");

                    b.Property<string>("BeforeJson")
                        .HasColumnType("text")
                        .HasColumnName("before_json");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.HasKey("AuditLogId")
                        .HasName("pk_audit_log");

                    b.HasIndex("Entity", "EntityId", "At")
                        .HasDatabaseName("ix_audit_log_entity_entity_id_at");

                    b.ToTable("audit_log", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("city");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("code");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_number");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_person");

                    b.Property<string>("Country")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("state");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("ClientId")
                        .HasName("pk_client");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_client_code");

                    b.ToTable("client", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.Holiday", b =>
                {
                    b.Property<DateOnly>("HolidayDate")
                        .HasColumnType("date")
                        .HasColumnName("holiday_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("IN")
                        .HasColumnName("region");

                    b.HasKey("HolidayDate")
                        .HasName("pk_holiday");

                    b.ToTable("holiday", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<bool>("Billable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("billable");

                    b.Property<decimal?>("BudgetCost")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("budget_cost");

                    b.Property<decimal?>("BudgetHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("budget_hours");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DefaultApprover")
                        .HasColumnType("uuid")
                        .HasColumnName("default_approver");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("ACTIVE")
                        .HasColumnName("status");

                    b.HasKey("ProjectId")
                        .HasName("pk_project");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_project_code");

                    b.HasIndex("ClientId", "Status")
                        .HasDatabaseName("ix_project_client_id_status");

                    b.ToTable("project", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.ProjectAllocation", b =>
                {
                    b.Property<Guid>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("allocation_id");

                    b.Property<decimal>("AllocationPct")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("allocation_pct");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("AllocationId")
                        .HasName("pk_project_allocation");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_project_allocation_user_id");

                    b.HasIndex("ProjectId", "UserId", "StartDate")
                        .IsUnique()
                        .HasDatabaseName("ix_project_allocation_project_id_user_id_start_date");

                    b.ToTable("project_allocation", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal?>("EstimatedHours")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("estimated_hours");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("TaskId")
                        .HasName("pk_task");

                    b.HasIndex("AssignedUserId")
                        .HasDatabaseName("ix_task_assigned_user_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_task_project_id");

                    b.HasIndex("ProjectId", "Status")
                        .HasDatabaseName("ix_task_project_id_status");

                    b.ToTable("task", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.TimesheetEntry", b =>
                {
                    b.Property<Guid>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entry_id");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by");

                    b.Property<string>("ApproverComment")
                        .HasColumnType("text")
                        .HasColumnName("approver_comment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Hours")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("hours");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer")
                        .HasColumnName("task_type");

                    b.Property<string>("TicketRef")
                        .HasColumnType("text")
                        .HasColumnName("ticket_ref");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date")
                        .HasColumnName("work_date");

                    b.HasKey("EntryId")
                        .HasName("pk_timesheet_entry");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_timesheet_entry_task_id");

                    b.HasIndex("ProjectId", "WorkDate")
                        .HasDatabaseName("ix_timesheet_entry_project_id_work_date");

                    b.HasIndex("UserId", "WorkDate")
                        .HasDatabaseName("ix_timesheet_entry_user_id_work_date");

                    b.ToTable("timesheet_entry", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_profile_id");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("bio");

                    b.Property<string>("Certifications")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("certifications");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DateOfJoining")
                        .HasColumnType("date")
                        .HasColumnName("date_of_joining");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department");

                    b.Property<string>("EducationBackground")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("education_background");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employee_id");

                    b.Property<string>("GitHubProfile")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("git_hub_profile");

                    b.Property<bool>("IsOnboardingComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_onboarding_complete");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("LinkedInProfile")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("linked_in_profile");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<DateTimeOffset?>("OnboardingCompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("onboarding_completed_at");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_photo_url");

                    b.Property<string>("ReportingManager")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("reporting_manager");

                    b.Property<int?>("TotalExperienceYears")
                        .HasColumnType("integer")
                        .HasColumnName("total_experience_years");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("UserProfileId")
                        .HasName("pk_user_profile");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_profile_user_id");

                    b.ToTable("user_profile", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_skill_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("skill_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_experience");

                    b.HasKey("UserSkillId")
                        .HasName("pk_user_skill");

                    b.HasIndex("UserId", "SkillName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_skill_user_id_skill_name");

                    b.ToTable("user_skill", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.WeeklyAllocation", b =>
                {
                    b.Property<Guid>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("allocation_id");

                    b.Property<int>("AllocatedHours")
                        .HasColumnType("integer")
                        .HasColumnName("allocated_hours");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("ACTIVE")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<decimal>("UtilizationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("utilization_percentage");

                    b.Property<DateOnly>("WeekEndDate")
                        .HasColumnType("date")
                        .HasColumnName("week_end_date");

                    b.Property<DateOnly>("WeekStartDate")
                        .HasColumnType("date")
                        .HasColumnName("week_start_date");

                    b.HasKey("AllocationId")
                        .HasName("pk_weekly_allocation");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_weekly_allocation_project_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_weekly_allocation_user_id");

                    b.HasIndex("WeekStartDate")
                        .HasDatabaseName("ix_weekly_allocation_week_start_date");

                    b.HasIndex("ProjectId", "UserId", "WeekStartDate")
                        .IsUnique()
                        .HasDatabaseName("ix_weekly_allocation_project_id_user_id_week_start_date");

                    b.ToTable("weekly_allocation", "ts");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.Project", b =>
                {
                    b.HasOne("OneDc.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.ProjectAllocation", b =>
                {
                    b.HasOne("OneDc.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_allocation_project_project_id");

                    b.HasOne("OneDc.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_allocation_app_user_user_id");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("OneDc.Domain.Entities.AppUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_task_app_user_assigned_user_id");

                    b.HasOne("OneDc.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_project_project_id");

                    b.Navigation("AssignedUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.TimesheetEntry", b =>
                {
                    b.HasOne("OneDc.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_timesheet_entry_project_project_id");

                    b.HasOne("OneDc.Domain.Entities.ProjectTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .HasConstraintName("fk_timesheet_entry_task_task_id");

                    b.HasOne("OneDc.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_timesheet_entry_app_user_user_id");

                    b.Navigation("Project");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("OneDc.Domain.Entities.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("OneDc.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profile_app_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.UserSkill", b =>
                {
                    b.HasOne("OneDc.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_skill_app_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneDc.Domain.Entities.WeeklyAllocation", b =>
                {
                    b.HasOne("OneDc.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weekly_allocation_project_project_id");

                    b.HasOne("OneDc.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weekly_allocation_app_user_user_id");

                    b.Navigation("Project");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
